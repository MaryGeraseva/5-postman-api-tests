{
	"info": {
		"_postman_id": "5b211800-3c4d-43e3-849b-2c44ee3b68ec",
		"name": "Not_allowed_method",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Store endpoint PUT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5389fd79-e65e-4f8d-b557-0db6c9d4bc1d",
						"exec": [
							"//1.Create random request data",
							"var moment = require('moment');",
							"",
							"pm.environment.set(\"id\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"petId\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"quantity\", Math.floor(Math.random() * 10) + 1);",
							"pm.environment.set(\"shipDate\", moment().format(\"YYYY-MM-DD\"));",
							"pm.environment.set(\"status\", \"placed\");",
							"pm.environment.set(\"complete\", Math.random() >= 0.5);",
							"",
							"//2.Create POST request",
							"const options = { method: 'POST',",
							"  url: 'https://petstore.swagger.io/v2/store/order',",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' },",
							"  body: { ",
							"       mode: 'raw',",
							"       raw: JSON.stringify({ ",
							"           id: pm.environment.get(\"id\"),",
							"           petId: pm.environment.get(\"petId\"),",
							"           quantity: pm.environment.get(\"quantity\"),",
							"           shipDate: pm.environment.get(\"shipDate\"),",
							"           status: pm.environment.get(\"status\"),",
							"           complete: pm.environment.get(\"complete\") ",
							"       })",
							"    }",
							"};",
							"",
							"  ",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"    const jsonData = response.json();",
							"    pm.environment.set(\"orderId\", jsonData.id);",
							"    console.log(response.json());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba359d46-3ad3-4aa8-b24f-b0ecc5d1a299",
						"exec": [
							"//1.Checking response status ",
							"pm.test(\"Status code is 405\", function () {",
							"  pm.response.to.have.status(405);",
							"});",
							"pm.test(\"Status message is \\\"Method Not Allowed\\\"\", function () {",
							"    pm.response.to.have.status(\"Method Not Allowed\");",
							"});",
							"//2.Checking response body",
							"pm.test(\"Body matches response message \\\"Method Not Allowed\\\"\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");",
							"});",
							"pm.test(\"Body matches status code 405\", function () {",
							"    pm.expect(pm.response.text()).to.include(405);",
							"});",
							"pm.test(\"Body matches status type error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(\"request body is:\" + request.data.toString().replace(/\\r\\n/g, \"\"));",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{orderId}},\r\n  \"petId\": {{$randomInt}},\r\n  \"quantity\": {{$randomInt}},\r\n  \"shipDate\": \"{{2025-08-08}}\",\r\n  \"status\": \"approved\",\r\n  \"complete\": {{$randomBoolean}}\r\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				},
				"description": "Test send not allowed request method PUT to store endpoint with required headers.\nTest data are generated automatically. \nExpected status code 4XX, message \"Method Not Allowed\""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "23032c5a-e36f-436f-83b2-a04d384f528d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5eafe540-bffe-4129-aea5-011e9ff9f5ae",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}