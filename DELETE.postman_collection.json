{
	"info": {
		"_postman_id": "ecbf026d-ab60-45a5-8d07-4c14c9d7547a",
		"name": "DELETE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Store endpoint DELETE 200 test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0ef26d3-aa04-41bc-a08a-916bb5496004",
						"exec": [
							"//1.Create random request data",
							"var moment = require('moment');",
							"",
							"pm.environment.set(\"id\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"petId\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"quantity\", Math.floor(Math.random() * 10) + 1);",
							"pm.environment.set(\"shipDate\", moment().format(\"YYYY-MM-DD\"));",
							"pm.environment.set(\"status\", \"approved\");",
							"pm.environment.set(\"complete\", Math.random() >= 0.5);",
							"",
							"//2.Create POST request",
							"const options = { method: 'POST',",
							"  url: 'https://petstore.swagger.io/v2/store/order',",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' },",
							"  body: { ",
							"       mode: 'raw',",
							"       raw: JSON.stringify({ ",
							"           id: pm.environment.get(\"id\"),",
							"           petId: pm.environment.get(\"petId\"),",
							"           quantity: pm.environment.get(\"quantity\"),",
							"           shipDate: pm.environment.get(\"shipDate\"),",
							"           status: pm.environment.get(\"status\"),",
							"           complete: pm.environment.get(\"complete\") ",
							"       })",
							"    }",
							"};",
							"",
							"  ",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"    const jsonData = response.json();",
							"    pm.environment.set(\"orderId\", jsonData.id);",
							"    console.log(response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "88752fee-cf48-43c0-a518-427be9a34194",
						"exec": [
							"//1.Checking status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2.Checking response message",
							"pm.test(\"Status message is \\\"OK\\\"\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "DELETE request tests with valid data and required headers.\r\nTest data were generated automatically.\r\nPre-request script makes POST request to add new order in database.\r\nExpected status code 200, message \"OK\""
			},
			"response": []
		},
		{
			"name": "Store endpoint DELETE nonexisten order 404 test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8b12f820-2174-444b-99a1-d550de41a78c",
						"exec": [
							"//1.Generate orderId and url",
							"pm.environment.set(\"orderId\", Math.floor(Math.random() * 10000) + 1);",
							"pm.environment.set(\"url\", \"https://petstore.swagger.io/v2/store/order/\" + pm.environment.get(\"orderId\"));",
							"",
							"//1.Create Delete request",
							"const options = { method: 'DELETE',",
							"  url: pm.environment.get(\"url\"),",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' }",
							"};",
							"",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dbb33b1e-afd2-42b0-a993-536f3e21740b",
						"exec": [
							"//1.Checking response status",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Status message is \\\"Not Found\\\"\", function () {",
							"    pm.response.to.be.notFound;",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message \\\"Order not found\\\"\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Order not found\");",
							"});",
							"pm.test(\"Body matches status code 404\", function () {",
							"    pm.expect(pm.response.text()).to.include(404);",
							"});",
							"pm.test(\"Body matches status type error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "DELETE request tests with nonexistent id and required headers.\r\nPre-request script makes DELETE request to clean database.\r\nExpected status 404 \"Not Found\", message \"Order not found\""
			},
			"response": []
		},
		{
			"name": "Store endpoint DELETE invalid id 400 tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "677a1be5-f1ab-4a08-ae1c-46d7242c2293",
						"exec": [
							"//1.Create invalid id data scope",
							"var testData = pm.environment.get(\"testData\");",
							"",
							"if (!testData) {",
							"    testData = [\"-9223372036854775809\", \"-3\", \"9223372036854775808\", \"0.5\", \"44,0\", \"0\", \"id\", \"/\", \"\"]",
							"} ",
							"",
							"var currentId = testData.shift();",
							"",
							"pm.environment.set(\"orderId\", currentId);",
							"pm.environment.set(\"testData\", testData);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "01149bed-b40f-4fdd-833e-9eaaefa59dcd",
						"exec": [
							"//1.Making request while array has data",
							"var testData = pm.environment.get(\"testData\");",
							"",
							"if (testData && testData.length > 0) {",
							"    postman.setNextRequest('Store endpoint DELETE invalid id 400 tests');",
							"} else {",
							"     postman.setNextRequest(null);",
							"}",
							"",
							"//2.Checking response status ",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status message is \\\"Bad Request\\\"\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//3.Checking response body",
							"pm.test(\"Body matches response message \\\"Invalid ID supplied\\\"\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid ID supplied\");",
							"});",
							"pm.test(\"Body matches status code 400\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "DELETE request tests with invalid id and required headers.\r\nTest data were read from pre-request script.\r\nExpected status 400 \"Bad Request\", message \"Invalid ID supplied\""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c06d8daa-7264-4bd8-9acc-8015356cdecf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e5e6d597-d638-49d4-beaa-ff4866487ce7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}