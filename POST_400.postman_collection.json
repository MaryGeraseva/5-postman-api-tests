{
	"info": {
		"_postman_id": "dd191403-ed81-4f51-ba25-80ba9c891fbe",
		"name": "POST_400",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Store endpoint POST with invalid data 400 tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ee014eaa-6adb-4b45-b8c6-8a2291eee2d6",
						"exec": [
							"//Create current date \r",
							"var moment = require('moment')\r",
							"pm.environment.set(\"currentDate\", moment().format(\"YYYY-MM-DD\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1b79c778-c73f-41ce-89ae-5ca99b943987",
						"exec": [
							"//1.Checking response status",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid Order\");",
							"});",
							"pm.test(\"Body matches status code\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{id}}\",\r\n  \"petId\": {{petId}},\r\n  \"quantity\": {{quantity}},\r\n  \"shipDate\": \"{{currentDate}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"complete\": {{complete}}\r\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order?",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "POST request tests with invalid data and required headers.\nTest data were read from csv file.\nExpected status 400 \"Bad Request\", message \"Invalid Order\""
			},
			"response": []
		},
		{
			"name": "Store endpoint POST shipDate field invalid 400 tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2b9d6b0f-e10a-4a48-a8ba-5cea92930d52",
						"exec": [
							"//1.Create data scope for shipDate field",
							"var dates = pm.environment.get(\"dates\");",
							"",
							"if (!dates) {",
							"    dates = [\"2000-05-08\", \"0\", \"\", \"shipDate\", \"08/08/2019\"]",
							"} ",
							"",
							"var shipDate = dates.shift();",
							"",
							"pm.environment.set(\"shipDate\", shipDate);",
							"pm.environment.set(\"dates\", dates);",
							"",
							"",
							"//2.Create data scope for status field",
							"var statuses = pm.environment.get(\"statuses\");",
							"",
							"if (!statuses) {",
							"    statuses = [\"placed\", \"approved\", \"delivered\", \"placed\", \"approved\"]",
							"} ",
							"",
							"var currentStatus = statuses.shift();",
							"",
							"pm.environment.set(\"status\", currentStatus);",
							"pm.environment.set(\"statuses\", statuses);",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8e5e9ee7-75f0-4cc8-b7ca-614027d16121",
						"exec": [
							"//1.Making request while arrays have data",
							"var dates = pm.environment.get(\"dates\");",
							"var statuses = pm.environment.get(\"statuses\");",
							"",
							"if (dates && dates.length > 0) {",
							"    postman.setNextRequest('Store endpoint POST shipDate field invalid status 400 tests');",
							"} else {",
							"     postman.setNextRequest(null);",
							"}",
							"",
							"//2.Checking response status",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//3.Checking response body",
							"pm.test(\"Body matches response message\", function() {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid Order\");",
							"});",
							"pm.test(\"Body matches status code\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(pm.response.json());",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"petId\": {{$randomInt}},\r\n  \"quantity\": {{$randomInt}},\r\n  \"shipDate\": \"{{shipDate}}\",\r\n  \"status\": \"{{status}}\",\r\n  \"complete\": {{$randomBoolean}}\r\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				},
				"description": "POST request tests with invalid shipDate field value and required headers.\nTest data were read from pre-request script and generate automatically.\nExpected status 400 \"Bad Request\", message \"Invalid Order\""
			},
			"response": []
		},
		{
			"name": "Store endpoint POST empty json 400 test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f94e7ca7-daa6-4d29-ae67-0d525f91cad7",
						"exec": [
							"//1.Checking response status",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid Order\");",
							"});",
							"pm.test(\"Body matches status code\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				},
				"description": "POST request test with required headers and empty body.\nExpected status 400 \"Bad Request\", message \"Invalid Order\""
			},
			"response": []
		},
		{
			"name": "Store endpoint POST with additional nonexistent field 400 test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3ee56b3-659d-49aa-87f7-c79d14ec8397",
						"exec": [
							"//1.Checking response status ",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid Order\");",
							"});",
							"pm.test(\"Body matches status code\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"",
							"console.log(pm.response.json());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"petId\": {{$randomInt}},\r\n  \"quantity\": {{$randomInt}},\r\n  \"shipDate\": \"2025-08-08\",\r\n  \"status\": \"approved\",\r\n  \"testField\": \"testValue\",\r\n  \"complete\": {{$randomBoolean}}\r\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				},
				"description": "POST request test with additional nonexistent field in body and required headers.\nTest data were generated automatically. \nExpected status 400 \"Bad Request\", message \"Invalid Order\""
			},
			"response": []
		},
		{
			"name": "Store endpoint POST without required field 400 test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb63de4a-1b77-442f-8f48-31b9b8b41dfd",
						"exec": [
							"//1.Checking response status",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"invalid order\");",
							"});",
							"pm.test(\"Body matches status code\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"",
							"console.log(pm.response.json());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"petId\": {{$randomInt}},\r\n  \"quantity\": {{$randomInt}},\r\n  \"shipDate\": \"2025-08-08\",\r\n  \"status\": \"approved\",\r\n  \"testField\": \"testValue\",\r\n  \"complete\": {{$randomBoolean}}\r\n}"
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				},
				"description": "POST request test without required field in body and with required headers.\nTest data were generated automatically. \nExpected status 400 \"Bad Request\", message \"Invalid Order\""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42bced50-7fe9-4c5b-9839-6c43741c1bb1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b9520c52-8c90-4e6e-8a01-a86ac02b1174",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}