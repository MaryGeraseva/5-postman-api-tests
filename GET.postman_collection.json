{
	"info": {
		"_postman_id": "8988d499-d6e6-4f0e-98e6-6f73db42654f",
		"name": "GET",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Store endpoint GET 200 test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8a2f3099-6448-4198-bf28-9379285437d5",
						"exec": [
							"//1.Create random request data",
							"var moment = require('moment');",
							"",
							"pm.environment.set(\"id\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"petId\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"quantity\", Math.floor(Math.random() * 10) + 1);",
							"pm.environment.set(\"shipDate\", moment().format(\"YYYY-MM-DD\"));",
							"pm.environment.set(\"status\", \"approved\");",
							"pm.environment.set(\"complete\", Math.random() >= 0.5);",
							"",
							"//2.Create POST request",
							"const options = { method: 'POST',",
							"  url: 'https://petstore.swagger.io/v2/store/order',",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' },",
							"  body: { ",
							"       mode: 'raw',",
							"       raw: JSON.stringify({ ",
							"           id: pm.environment.get(\"id\"),",
							"           petId: pm.environment.get(\"petId\"),",
							"           quantity: pm.environment.get(\"quantity\"),",
							"           shipDate: pm.environment.get(\"shipDate\"),",
							"           status: pm.environment.get(\"status\"),",
							"           complete: pm.environment.get(\"complete\") ",
							"       })",
							"    }",
							"};",
							"",
							"  ",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"    const jsonData = response.json();",
							"    pm.environment.set(\"orderId\", jsonData.id);",
							"    console.log(response.json());",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dff94291-4c3b-4eca-b656-1d74a2e5e59b",
						"exec": [
							"//1.Checking status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2.Checking response message",
							"pm.test(\"Status message is \\\"OK\\\"\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//3.Checking response body fields",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Checking id value\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"pm.test(\"Checking petId value\", function () {",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"petId\"));",
							"});",
							"pm.test(\"Checking quantity value\", function () {",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"quantity\"));",
							"});",
							"pm.test(\"Checking shipDate value\", function () {",
							"    pm.expect(jsonData.shipDate).to.include(pm.environment.get(\"shipDate\"));",
							"});",
							"pm.test(\"Checking status value\", function () {",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"status\"));",
							"});",
							"pm.test(\"Checking complete value\", function () {",
							"    pm.expect(jsonData.complete).to.be.oneOf([true, false]);",
							"});",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "GET request test with valid id and required headers.\r\nTest data are generated automatically in pre-request.\r\nPre-request script makes POST request to add new order in database.\r\nExpected status code 200, message \"OK\" and response body"
			},
			"response": []
		},
		{
			"name": "Store endpoint GET 200 test json schema validaton",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00d91878-2721-47ec-bca1-fc1a0673ef57",
						"exec": [
							"//1.Checking status code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2.Checking response message",
							"pm.test(\"Status message is \\\"OK\\\"\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//3.Json schema validation",
							"var responseData = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"required\": [\"id\", \"petId\", \"quantity\", \"status\", \"complete\"],",
							"    \"properties\": {",
							"        \"id\":{\"type\": \"integer\"},",
							"        \"petId\":{\"type\": \"integer\"},",
							"        \"quantity\":{\"type\": \"integer\"},",
							"        \"status\":{\"type\": \"string\"},",
							"        \"complete\":{\"type\": \"boolean\"}",
							"    }",
							"};",
							"",
							"pm.test(\"Json schema is valid\", function() {",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;",
							"});",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f3cbf469-acb4-4a5d-8d22-54a6fb8edbc5",
						"exec": [
							"//1.Create random request data",
							"var moment = require('moment');",
							"",
							"pm.environment.set(\"id\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"petId\", Math.floor(Math.random() * 1000) + 1);",
							"pm.environment.set(\"quantity\", Math.floor(Math.random() * 10) + 1);",
							"pm.environment.set(\"shipDate\", moment().format(\"YYYY-MM-DD\"));",
							"pm.environment.set(\"status\", \"approved\");",
							"pm.environment.set(\"complete\", Math.random() >= 0.5);",
							"",
							"//2.Create POST request",
							"const options = { method: 'POST',",
							"  url: 'https://petstore.swagger.io/v2/store/order',",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' },",
							"  body: { ",
							"       mode: 'raw',",
							"       raw: JSON.stringify({ ",
							"           id: pm.environment.get(\"id\"),",
							"           petId: pm.environment.get(\"petId\"),",
							"           quantity: pm.environment.get(\"quantity\"),",
							"           shipDate: pm.environment.get(\"shipDate\"),",
							"           status: pm.environment.get(\"status\"),",
							"           complete: pm.environment.get(\"complete\") ",
							"       })",
							"    }",
							"};",
							"",
							"  ",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"    const jsonData = response.json();",
							"    pm.environment.set(\"orderId\", jsonData.id);",
							"    console.log(response.json());",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "GET request test with valid id and required headers.\r\nTest data are generated automatically in pre-request.\r\nPre-request script makes POST request to add new order in database.\r\nExpected status code 200, message \"OK\" and response body.\r\nAssertion with json schema validator"
			},
			"response": []
		},
		{
			"name": "Store endpoint GET nonexistent order 404 test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8b12f820-2174-444b-99a1-d550de41a78c",
						"exec": [
							"//1.Generate orderId and url",
							"pm.environment.set(\"orderId\", Math.floor(Math.random() * 10000) + 1);",
							"pm.environment.set(\"url\", \"https://petstore.swagger.io/v2/store/order/\" + pm.environment.get(\"orderId\"));",
							"",
							"//1.Create Delete request",
							"const options = { method: 'DELETE',",
							"  url: pm.environment.get(\"url\"),",
							"  header: { ",
							"     'Content-Type': 'application/json',",
							"     'api_key': 'maryTest062019' }",
							"};",
							"",
							"//3.Send POST request and set id variable",
							"pm.sendRequest(options, function (error, response) {",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dbb33b1e-afd2-42b0-a993-536f3e21740b",
						"exec": [
							"//1.Checking response status ",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"pm.test(\"Status message is \\\"Not Found\\\"\", function () {",
							"    pm.response.to.have.status(\"Not Found\");",
							"});",
							"",
							"//2.Checking response body",
							"pm.test(\"Body matches response message \\\"Order not found\\\"\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Order not found\");",
							"});",
							"pm.test(\"Body matches status code 404\", function () {",
							"    pm.expect(pm.response.text()).to.include(404);",
							"});",
							"pm.test(\"Body matches status type error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"console.log(\"response body is: \" + responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "GET request test with nonexistent id and required headers.\r\nTest data are generated automatically in pre-request.\r\nPre-request script makes DELETE request to clean database.\r\nExpected status 404 \"Not Found\", message \"Order not found\""
			},
			"response": []
		},
		{
			"name": "Store endpoint GET invalid id 400 tests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c0684d37-58eb-41a5-a4fd-91cb9104b5c1",
						"exec": [
							"//1.Create invalid id data scope",
							"var testData = pm.environment.get(\"testData\");",
							"",
							"if (!testData) {",
							"    testData = [\"-9223372036854775809\", \"-3\", \"9223372036854775808\", \"0.5\", \"44,0\", \"0\", \"id\", \"/\", \"\"]",
							"} ",
							"",
							"var currentId = testData.shift();",
							"",
							"pm.environment.set(\"orderId\", currentId);",
							"pm.environment.set(\"testData\", testData);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "19dc191b-674d-409a-adeb-becfa0164ffe",
						"exec": [
							"//1.Making request while array has data",
							"var testData = pm.environment.get(\"testData\");",
							"",
							"if (testData && testData.length > 0) {",
							"    postman.setNextRequest('Store endpoint GET invalid id 400 tests');",
							"} else {",
							"     postman.setNextRequest(null);",
							"}",
							"",
							"//2.Checking response status",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Status message is \\\"Bad Request\\\"\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"//3.Checking response body",
							"pm.test(\"Body matches response message \\\"Invalid ID supplied\\\"\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Invalid ID supplied\");",
							"});",
							"pm.test(\"Body matches status code 400\", function () {",
							"    pm.expect(pm.response.text()).to.include(400);",
							"});",
							"pm.test(\"Body matches status type error\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"error\");",
							"});",
							"",
							"",
							"console.log(\"response body is: \" + responseBody);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "api_key",
						"type": "text",
						"value": "maryTest062019"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{orderId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{orderId}}"
					]
				},
				"description": "GET request test with invalid id and required headers.\r\nTest data are read from pre-request script.\r\nExpected status 400 \"Bad Request\", message \"Invalid ID supplied\""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5b5a0c27-90a9-4a2d-bc2f-3e11ff22f10e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "753aa320-d51e-4528-b299-06eabd75731f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}